I"<h1 id="이벤트-루프">이벤트 루프</h1>
<h2 id="이벤트-루프란">이벤트 루프란?</h2>
<p>Node.js에 대한 글들을 찾아보면 자바스크립트 기반의 런타임이고, 자바스크립트는 단일 스레드 기반의 언어이지만 동시성을 가질 수 있는 언어라는 글을 심심찮게 볼 수 있다.
여기서 단일 스레드 기반이면서 어떻게 통시성이라는 개념을 가질 수 있게 되는지에 대한 의문이 남는다. 이 개념을 설명하기 위해서 등장하는 개념이 이벤트 루프이고, 항상 이벤트 루프 기반의 비동기 방식으로 논블로킹 IO를 지원한다…라는 말이 등장한다<a href="https://ko.wikipedia.org/wiki/Node.js">링크</a>.</p>

<p>하지만 자바스크립트 엔진 V8 등등에서는 단일 호출 스택을 사용하여 요청이 들어올 때마다 해당 요청을 순차적으로 호출 수택에 담아 처리할 뿐인데, 이 이벤트 루프라는게 어떤 조화를 부리셔서 싱글스레드에서 동시성을 지원할 수 있게 되는지를 알아 보자.</p>

<p>일단 브라우저에서는 Web APIs, Event Table, allback Queue, Event Loop 등으로 구성되어 있다.</p>
<ol>
  <li>Web APIs<br />
Web APIs에서는 DOM, XMLHttpRequest, setTimeout이 있고</li>
  <li>
    <p>Callback Queue<br />
Callback Queue에는 이벤트 발생 시 실행할 callback 함수가 큐에 추가되고.</p>
  </li>
  <li>Call Stack<br /></li>
  <li>Event Table<br /></li>
  <li>Event Loop<br /></li>
</ol>

<p>microtask queue(job queue)           &gt; animation frames &gt;         task queue(event queue)
promise.then/catch, process.nextTick                                      timer
promise 내부까지는 동기(resolve 등)
.then을 만나는 순간 비동기</p>
:ET